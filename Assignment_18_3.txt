case class Record(Userid: Int, Arrival: String, Departure: String, Transport: String,Distance: Int, Year: Int)
case class User(Id: Int,Name: String,Age: Int)
case class Transport(Name: String,Number: Int)

val dataSetHolidays = sc.textFile("hdfs:///user/cloudera/S18_Dataset_Holidays.txt").filter(_.nonEmpty)
val UserDetails = sc.textFile("hdfs:///user/cloudera/S18_Dataset_User_details.txt").filter(_.nonEmpty)
val TransportDetails = sc.textFile("hdfs:///user/cloudera/S18_Dataset_Transport.txt").filter(_.nonEmpty)

val dfRecords = dataSetHolidays.map(_.split(",") match{
case Array(userid,arrival,departure,transport,distance,year) => Record(userid.toInt,arrival,departure,transport,distance.toInt,year.toInt)
case unexpectedArrayForm => 
    throw new RuntimeException("Record did not have correct number of fields: " +
      unexpectedArrayForm.mkString("\t"))
}).toDF()

val dfUserRecords = UserDetails.map(_.split(",") match{
case Array(id,name,age) => User(id.toInt,name,age.toInt)
case unexpectedArrayForm => 
    throw new RuntimeException("Record did not have correct number of fields: " +
      unexpectedArrayForm.mkString("\t"))
}).toDF()

val dfTransportRecords = TransportDetails.map(_.split(",") match{
case Array (name,number) => Transport(name,number.toInt)
case unexpectedArrayForm => 
    throw new RuntimeException("Record did not have correct number of fields: " +
      unexpectedArrayForm.mkString("\t"))
}).toDF()

val UserName = dfRecords.join(dfUserRecords,dfRecords("Userid") === dfUserRecords("Id"),"Inner")

val TotalJoinedRecords = UserName.join(dfTransportRecords,UserName("Transport") === dfTransportRecords("Name"),"Inner")

import org.apache.spark.sql.functions._
val ageGroup: (Int => String) = (arg: Int) => {
if (arg < 20) {"Less_than_20"}
else if ((arg >= 20) && (arg < 35)) {"Between_20_and_35"}
else {"Above_35"}
}
val sqlfunc = udf(ageGroup)
val AgeGroupRecords = TotalJoinedRecords.withColumn("AgeGroup", sqlfunc(col("Age")))

1. AgeGroupRecords.groupBy("AgeGroup").agg(sum($"Number").as("TotalAmount")).show()
+-----------------+-----------+                                                 
|         AgeGroup|TotalAmount|
+-----------------+-----------+
|Between_20_and_35|       2210|
|     Less_than_20|       1700|
|         Above_35|       1530|
+-----------------+-----------+

2. AgeGroupRecords.groupBy("AgeGroup","Year").agg(sum($"Number").as("TotalAmount")).show()
+-----------------+----+-----------+                                            
|         AgeGroup|Year|TotalAmount|
+-----------------+----+-----------+
|         Above_35|1990|        340|
|         Above_35|1991|        340|
|         Above_35|1992|        680|
|         Above_35|1993|        170|
|Between_20_and_35|1990|        850|
|Between_20_and_35|1991|        680|
|Between_20_and_35|1992|        340|
|Between_20_and_35|1993|        170|
|Between_20_and_35|1994|        170|
|     Less_than_20|1990|        170|
|     Less_than_20|1991|        510|
|     Less_than_20|1992|        170|
|     Less_than_20|1993|        850|
+-----------------+----+-----------+
